{"ast":null,"code":"import axios from './axiosConfig'; // Adjust the path as necessary\n\nconst checkTokenExpiration = () => {\n  const token = localStorage.getItem('token');\n  console.log('Token:', token); // Add this to inspect the token value\n  if (!token) return false;\n  try {\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    const expiry = payload.exp * 1000;\n    return Date.now() < expiry;\n  } catch (error) {\n    console.error('Error decoding token:', error);\n    return false;\n  }\n};\n\n// Remove redundant token storage here\nconst handleLogin = async (email, password) => {\n  try {\n    const response = await axios.post('/api/login', {\n      email,\n      password\n    });\n    console.log('Response:', response.data); // Check the response structure here\n    if (response.data.token) {\n      window.location.href = '/home';\n    } else {\n      console.error('No token received from the server.');\n    }\n  } catch (error) {\n    setErrors({\n      api: 'Login failed. Please check your credentials and try again.'\n    });\n  }\n};\nconst handleLogout = () => {\n  localStorage.removeItem('token');\n  window.location.href = '/login';\n};\nexport { checkTokenExpiration, handleLogin, handleLogout };","map":{"version":3,"names":["axios","checkTokenExpiration","token","localStorage","getItem","console","log","payload","JSON","parse","atob","split","expiry","exp","Date","now","error","handleLogin","email","password","response","post","data","window","location","href","setErrors","api","handleLogout","removeItem"],"sources":["C:/xampp/htdocs/task/frontend/src/components/authUtils.js"],"sourcesContent":["import axios from './axiosConfig'; // Adjust the path as necessary\r\n\r\nconst checkTokenExpiration = () => {\r\n  const token = localStorage.getItem('token');\r\n  console.log('Token:', token); // Add this to inspect the token value\r\n  if (!token) return false;\r\n\r\n  try {\r\n    const payload = JSON.parse(atob(token.split('.')[1]));\r\n    const expiry = payload.exp * 1000;\r\n    return Date.now() < expiry;\r\n  } catch (error) {\r\n    console.error('Error decoding token:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Remove redundant token storage here\r\nconst handleLogin = async (email, password) => {\r\n  try {\r\n    const response = await axios.post('/api/login', { email, password });\r\n    console.log('Response:', response.data);  // Check the response structure here\r\n    if (response.data.token) {\r\n      window.location.href = '/home';\r\n    } else {\r\n      console.error('No token received from the server.');\r\n    }\r\n  } catch (error) {\r\n    setErrors({ api: 'Login failed. Please check your credentials and try again.' });\r\n  }\r\n};\r\n\r\nconst handleLogout = () => {\r\n  localStorage.removeItem('token');\r\n  window.location.href = '/login';\r\n};\r\n\r\nexport { checkTokenExpiration, handleLogin, handleLogout };\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,eAAe,CAAC,CAAC;;AAEnC,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EACjC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3CC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEJ,KAAK,CAAC,CAAC,CAAC;EAC9B,IAAI,CAACA,KAAK,EAAE,OAAO,KAAK;EAExB,IAAI;IACF,MAAMK,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACR,KAAK,CAACS,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,MAAMC,MAAM,GAAGL,OAAO,CAACM,GAAG,GAAG,IAAI;IACjC,OAAOC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGH,MAAM;EAC5B,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,MAAMC,WAAW,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,IAAI,CAAC,YAAY,EAAE;MAAEH,KAAK;MAAEC;IAAS,CAAC,CAAC;IACpEd,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEc,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAE;IAC1C,IAAIF,QAAQ,CAACE,IAAI,CAACpB,KAAK,EAAE;MACvBqB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,OAAO;IAChC,CAAC,MAAM;MACLpB,OAAO,CAACW,KAAK,CAAC,oCAAoC,CAAC;IACrD;EACF,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdU,SAAS,CAAC;MAAEC,GAAG,EAAE;IAA6D,CAAC,CAAC;EAClF;AACF,CAAC;AAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzBzB,YAAY,CAAC0B,UAAU,CAAC,OAAO,CAAC;EAChCN,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;AACjC,CAAC;AAED,SAASxB,oBAAoB,EAAEgB,WAAW,EAAEW,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}